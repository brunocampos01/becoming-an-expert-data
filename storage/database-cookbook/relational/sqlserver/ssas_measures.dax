// ------------------------------------------------------------------------------------------------
// dTempo

// original
// Dias Úteis Mês = CALCULATE(sum('dCalendário'[Fim de Semana]))
Dias Úteis Mês := 
    CALCULATE(SUM(dTempo[Binário Flag Dia da Semana]),
              FILTER(dTempo, dTempo[Código Ano] >= 2017),
              FILTER(dTempo, dTempo[Data] < TODAY()),
              FILTER(dTempo, dTempo[Flag Feriado] = "N"))

Dias Úteis Mês Simplificado := SUM(dTempo[Binário Flag Dia da Semana])

Horas Úteis Mês := 
    [Dias Úteis Mês] * 8

IAD :=
    CALCULATE(DIVIDE([Qtde output], [Qtde input], 0))

Média input - Mensal :=
    ROUND([Qtde input]/[Meses Contabilizados], 0)

Média input - Diária :=
    ROUND([Qtde input]/[Dias Úteis Mês], 0)

Média input - dias úteis :=
    ROUND([Qtde input]/[Dias Úteis Mês], 0)

Média output - Mensal :=
    ROUND([Qtde output]/[Meses Contabilizados], 0)

Média output - Diária :=
    ROUND([Qtde output]/[Dias Úteis Mês], 0)

// original
// Meses Contabilizados = (DISTINCTCOUNT('dCalendário'[idmês]))
Meses Contabilizados :=
    CALCULATE(DISTINCTCOUNT(dTempo[Código Período]),
                FILTER(dTempo, dTempo[Código Ano] >= 2017),
                FILTER(dTempo, dTempo[Código Ano] < 2026))

Meta Produtividade Individual :=
    8

Título - Seleção Cliente :=
    IF(HASONEFILTER(dCliente[Cliente]),
      "CENÁRIO ➝ "&FILTERS(dCliente[Cliente]),
      "SELECIONE O CLIENTE")

// ------------------------------------------------------------------------------------------------
// fact_registry

fact_registry | IDA :=
    (DIVIDE(fact_registry[Sum of Minutos], 480))

fact_registry | IDAH:= // índice de apontamento por hora
    DIVIDE(fact_registry[Average of Minutos], 480)

Qtde Chamados Apontamento := 
    DISTINCTCOUNT([IDCHAMADO])

Horas Potências :=
    fact_registry[Distinct Count of IDUSUARIO] * [Horas Úteis Mês]

Média Horas Apontadas := 
    AVERAGE([Horas Apontadas])

Média Horas Apontadas no Mês:= 
CALCULATE(AVERAGE(fact_registry[Média Horas Apontadas por Apontamento]),
    FILTER(fact_registry, fact_registry[Média Horas Apontadas por Apontamento] > 0),
    ALL(fact_registry))

Horas Apontadas no Mês := 
    CALCULATE(SUM(fchamadoApontamento[Horas Apontadas]),
                FILTER(dTempoApontamento, dTempoApontamento[Código Mês] == MONTH(TODAY())),
                FILTER(dTempoApontamento,  dTempoApontamento[Código Ano]== YEAR(TODAY())))

// ------------------------------------------------------------------------------------------------
// fact_backlog

// original
// Qtde A Vencer = CALCULATE(sum(fBacklog[SLA a Vencer]),FILTER(fBacklog,fBacklog[Type]<>"Defeito Consequência"))
Qtde A Vencer :=
    CALCULATE(SUM(fact_backlog[SLA a Vencer]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original
// Qtde Backlog = CALCULATE(COUNT(fBacklog[Id]),FILTER(fBacklog,fBacklog[Type]<>"Defeito Consequência"))
Qtde Backlog :=
    CALCULATE(COUNT(fact_backlog[IDCHAMADO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original
// Qtde Backlog Consequência = CALCULATE(COUNT(fBacklog[Id]),FILTER(fBacklog,fBacklog[Type]="Defeito Consequência"))
Qtde Backlog Consequência :=
    CALCULATE(COUNT(fact_backlog[IDCHAMADO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] = "Defeito Consequência"))

// original
// Qtde Sem SLA = CALCULATE(sum(fBacklog[Sem SLA]),FILTER(fBacklog,fBacklog[Type]<>"Defeito Consequência"))
Qtde Sem SLA: =
    CALCULATE(SUM(fact_backlog[Sem SLA]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original
// Qtde Vencidos = CALCULATE(sum(fBacklog[SLA Vencido]),FILTER(fBacklog,fBacklog[Type]<>"Defeito Consequência"))
Qtde Vencidos :=
    CALCULATE(SUM(fact_backlog[SLA Vencido]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

Qtde Backlog Zero :=
    COUNTROWS(fact_backlogZero)

// ------------------------------------------------------------------------------------------------
// fact_input

// original
// Qtde input = CALCULATE(COUNT(finput[Id]),FILTER(finput,finput[Type]<>"Defeito Consequência"))
Qtde input :=
    CALCULATE(COUNT(fact_input[IDCHAMADO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original
// Qtde input Consequência = CALCULATE(COUNT(finput[Id]),FILTER(finput,finput[Type]="Defeito Consequência"))
Qtde input Consequência :=
    CALCULATE(COUNT(fact_input[IDCHAMADO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] = "Defeito Consequência"))

// ------------------------------------------------------------------------------------------------
// fact_output

// original
// Qtde output = CALCULATE(COUNT('fSaídas'[Id]),FILTER('fSaídas','fSaídas'[Type]<>"Defeito ConsequÊncia"))
fact_output | Qtde output :=
    CALCULATE(COUNT(fact_output[IDCHAMADO]), 
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

fact_output | Qtde output Consequência :=
    CALCULATE(COUNT(fact_output[IDCHAMADO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] = "Defeito Consequência"))

Produtividade :=
    DIVIDE([Qtde output], [Qtde Analistas])

Produtividade DEV :=
    DIVIDE([Qtde output], [Qtde Analistas])

Produtividade Testers :=
    DIVIDE([Qtde output], [Qtde Testers])

Produtividade Mês := 
    DIVIDE([Qtde output], [Dias Úteis Mês])

SLA:=
    DIVIDE([Qtde output No Prazo],
          ([Qtde output No Prazo] + [Qtde output Fora Prazo]))

// original
// Qtde output Fora Prazo = CALCULATE(COUNTROWS('fSaídas'),FILTER('fSaídas','fSaídas'[Fora Prazo]=1),FILTER('fSaídas','fSaídas'[Type]<>"Defeito ConsequÊncia"))
Qtde output Fora Prazo :=
    CALCULATE(COUNTROWS(fact_output),
              FILTER(fact_output, fact_output[Fora Prazo] = 1),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

Qtde output No Prazo :=
    CALCULATE(COUNTROWS(fact_output),
              FILTER(fact_output, fact_output[No Prazo]=1),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original
// Última Entrega = CALCULATE(MAX('fSaídas'[Resolution Date]),FILTER('fSaídas','fSaídas'[Type]<>"Defeito Consequência"))
Última Entrega :=
    CALCULATE(MAX(fact_output[Data IDDTRESOLUCAO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original
// Média output Dev = [Qtde output]/DISTINCTCOUNT('fSaídas'[Data Apuração])
Média output Dev :=
    [Qtde output]/DISTINCTCOUNT(fact_output[Data IDDTAPURACAO])

Qtde Dias Última Entrega := 
    CALCULATE(DATEDIFF(MAX(fact_output[Data IDDTRESOLUCAO]), TODAY(), DAY),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência"))

// original 
// Qtde Testers = CALCULATE(DISTINCTCOUNT('fSaídas'[Tester]),FILTER('fSaídas','fSaídas'[Type]<>"Defeito ConsequÊncia"))
Qtde Testers :=
    CALCULATE(DISTINCTCOUNT(fact_output[IDTESTER]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência")) // unsigned, null e '' como Não Informado

// original
// Qtde Analistas = CALCULATE(DISTINCTCOUNT('fSaídas'[Owned By]),FILTER('fSaídas','fSaídas'[Type]<>"Defeito ConsequÊncia"))
Qtde Analistas :=
    CALCULATE(DISTINCTCOUNT(fact_output[IDUSUARIOPROPRIETARIO]),
              FILTER(dTipoChamado, dTipoChamado[Tipo Chamado] <> "Defeito Consequência")) // unsigned, null e '' como Não Informado

// ------------------------------------------------------------------------------------------------
// fChamadoTempoMedio           

// original
// Qtde Itens Tempo Médio = DISTINCTCOUNT('fTempoMédio'[Id])
fChamadoTempoMedio | Qtde Itens Tempo Médio :=
    DISTINCTCOUNT(fChamadoTempoMedio[IDCHAMADO])

// original 
// Media Tempo Gasto Status = CALCULATE(SUM('fTempoMédio'[Tempo Gasto]))/[Qtde Itens Tempo Médio]
fChamadoTempoMedio | Media Tempo Gasto Status :=
    CALCULATE(SUM(fChamadoTempoMedio[Tempo Gasto]) / [Qtde Itens Tempo Médio])

// original
// Tempo Médio Solução = AVERAGE('fTempoMédio'[Tempo Gasto])
Tempo Médio Solução :=
    AVERAGE(fChamadoTempoMedio[Tempo Gasto])

// original 
// Qtde Negociações = COUNTROWS(fNegociados)
Qtde Negociações :=
    COUNTROWS(fChamadoNegociado)


// ------------------------------------------------------------------------------------------------
// Autorização

Usuário Nome := // "/brunocampos01"
	MID(USERNAME(), SEARCH("\", USERNAME()), 100)

Usuário Logado := // "brunocampos01"
    RIGHT([usuário nome], (LEN([usuário nome])-1))
